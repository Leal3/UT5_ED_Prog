@startuml
' Título del Diagrama
title Diseño Estructural - Gestión de Vehículos

' --- Configuración Visual (Opcional) ---
skinparam classAttributeIconSize 0
skinparam linetype ortho
hide empty members

' --- Definición de Enumeraciones (Enums) ---
enum NivelRiesgo {
  BAJO
  MEDIO
  ALTO
}

' --- Definición de la Interfaz ---
interface Valorable {
  + calcularDepreciacion(): double
}

' --- Definición de la Clase Persona ---
class Persona {
  + nombre: String
  + apellidos: String
  - DNI: String
  + anioNacimiento: int
  + fechaCaducidadCarnet: LocalDate
  --
  + validarDNI(): boolean
}

' --- Clase Base Abstracta y Relaciones ---
abstract class Vehiculo {
  + matricula: String
  + marca: String
  + modelo: String
  # kilometraje: double
  # precio: double
  --
  + {abstract} calcularRiesgoConductor(): NivelRiesgo
}

' --- Relaciones Principales ---
Vehiculo "1" o-- "0..1" Persona : "tiene un propietario >"
Valorable <|.. Vehiculo

' --- Subclases de Vehículo ---
class Coche extends Vehiculo {
  + numeroPuertas: int
  + tipoCarroceria: String
}

class Moto extends Vehiculo {
  + cilindrada: int
  + tieneCarenado: boolean
}

class Camion extends Vehiculo {
  + capacidadCargaKg: double
  + numeroEjes: int
}

' --- Subtipos Específicos de Coche ---
class Sedan extends Coche {
  + capacidadMaleteroLitros: int
}
class SUV extends Coche {
  + tieneTraccion4x4: boolean
}
class Deportivo extends Coche {
  + potenciaCV: int
  + velocidadMaxima: int
}

' --- Subtipos Específicos de Moto ---
class Scooter extends Moto {
  + tieneHuecoBajoAsiento: boolean
}
class Deportiva extends Moto {
  + posicionConduccion: String
}

@enduml
Vehiculo "1"-->"0..*" Persona
Vehiculo ..|> Valorable
Vehiculo --> Validar
Persona --> Validar
@enduml
